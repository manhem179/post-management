const multer = require('multer');
const path = require('path');
const fs = require('fs');

// ƒê·∫£m b·∫£o th∆∞ m·ª•c uploads t·ªìn t·∫°i
const uploadsDir = './uploads/';
if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir, { recursive: true });
    console.log('‚úÖ Created uploads directory');
}

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    console.log('üìÅ Upload destination:', uploadsDir);
    cb(null, uploadsDir);
  },
  filename: (req, file, cb) => {
    const filename = `${Date.now()}-${file.originalname}`;
    console.log('üìÑ Upload filename:', filename);
    cb(null, filename);
  }
});

const fileFilter = (req, file, cb) => {
  console.log('üîç File filter - Original name:', file.originalname);
  console.log('üîç File filter - Mime type:', file.mimetype);
  
  const ext = path.extname(file.originalname).toLowerCase();
  console.log('üîç File filter - Extension:', ext);
  
  if (ext !== '.png' && ext !== '.jpg' && ext !== '.jpeg') {
    console.log('‚ùå File filter - Invalid extension:', ext);
    return cb(new Error('Ch·ªâ ch·∫•p nh·∫≠n file .png, .jpg, .jpeg'), false);
  }
  
  console.log('‚úÖ File filter - Valid file');
  cb(null, true);
};

const upload = multer({
  storage,
  fileFilter,
  limits: { fileSize: 2 * 1024 * 1024 } // 2MB
});

// Middleware ƒë·ªÉ x·ª≠ l√Ω l·ªói upload
const handleUploadError = (error, req, res, next) => {
  console.error('‚ùå Upload error:', error.message);
  
  if (error instanceof multer.MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({ message: 'File qu√° l·ªõn! K√≠ch th∆∞·ªõc t·ªëi ƒëa l√† 2MB.' });
    }
  }
  
  if (error.message.includes('Ch·ªâ ch·∫•p nh·∫≠n file')) {
    return res.status(400).json({ message: error.message });
  }
  
  return res.status(500).json({ message: 'L·ªói upload file' });
};

module.exports = upload;
module.exports.handleUploadError = handleUploadError;
